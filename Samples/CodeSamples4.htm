<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Java</title>
</head>

<body bgcolor="#CCFFFF">

<p align="center"><span style="font-size:12.0pt;font-family:Arial;mso-ascii-font-family:Arial;
mso-fareast-font-family:+mn-ea;mso-bidi-font-family:+mn-cs;color:black;
mso-color-index:1;mso-font-kerning:12.0pt;language:en-US;font-style:italic">JAVA:
An Introduction to Problem Solving &amp; Programming, 7</span><span style="font-size:12.0pt;font-family:Arial;mso-ascii-font-family:Arial;
mso-fareast-font-family:+mn-ea;mso-bidi-font-family:+mn-cs;color:black;
mso-color-index:1;mso-font-kerning:12.0pt;language:en-US;vertical-align:super;
mso-text-raise:30%">th</span><span style="font-size:12.0pt;font-family:Arial;
mso-ascii-font-family:Arial;mso-fareast-font-family:+mn-ea;mso-bidi-font-family:
+mn-cs;color:black;mso-color-index:1;mso-font-kerning:12.0pt;language:en-US">
Ed. By Walter Savitch</span><span style="font-size:12.0pt;font-family:
Arial;mso-ascii-font-family:Arial;mso-fareast-font-family:+mn-ea;mso-bidi-font-family:
+mn-cs;color:black;mso-color-index:1;mso-font-kerning:12.0pt;language:en-US">.<br>
ISBN <span style="color: black; font-family: Arial; font-size: 12pt; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: -webkit-center; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(204, 255, 255);">0133862119</span><span style="color: black; font-family: Arial; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: -webkit-center; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(204, 255, 255);"><span class="Apple-converted-space">&nbsp;</span></span></span><span style="font-size:12.0pt;font-family:Arial;
mso-ascii-font-family:Arial;mso-fareast-font-family:+mn-ea;mso-bidi-font-family:
Arial;color:black;mso-color-index:1;mso-font-kerning:12.0pt;language:en-US">©
2015 Pearson Education, Inc., Upper Saddle River, NJ. All Rights Reserved</span> </p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="38%">
    <tr>
      <td width="50%">
        <ul>
          <li><font face="Arial"><a href="#Listing 7.1">Listing 7.1</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.2">Listing 7.2</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.3">Listing 7.3</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.4">Listing 7.4</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.5">Listing 7.5</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.6">Listing 7.6</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.7">Listing 7.7</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.8">Listing 7.8</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.9">Listing 7.9</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.10">Listing 7.10</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.11">Listing 7.11</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.12">Listing 7.12</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.13">Listing 7.13</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.14">Listing 7.14</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.15">Listing 7.15</a></font></li>
          <li><font face="Arial"><a href="#Listing 7.16">Listing 7.16</a><br>
            <br>
            <br>
            <br>
            </font></li>
        </ul>
      </td>
      <td width="50%">
        <ul>
          <li><font face="Arial"><a href="#Listing 8.1">Listing 8.1</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.2">Listing 8.2</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.3">Listing 8.3</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.4">Listing 8.4</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.5">Listing 8.5</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.6">Listing 8.6</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.7">Listing 8.7</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.8">Listing 8.8</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.9">Listing 8.9</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.10">Listing 8.10</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.11">Listing 8.11</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.12">Listing 8.12</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.13">Listing 8.13</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.14">Listing 8.14</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.15">Listing 8.15</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.16">Listing 8.16</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.17">Listing 8.17</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.18">Listing 8.18</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.19">Listing 8.19</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.20">Listing 8.20</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.21">Listing 8.21</a></font></li>
          <li><font face="Arial"><a href="#Listing 8.22">Listing 8.22</a></font></li>
        </ul>
      </td>
    </tr>
  </table>
  </center>
</div>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>

<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.1">Listing 7.1</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Reads 7 temperatures from the user and shows which are above
and which are below the average of the 7 temperatures.
*/
import java.util.Scanner;
public class ArrayOfTemperatures
{
    public static void main (String [] args)
    {
        double [] temperature = new double [7];
        // Read temperatures and compute their average:
        Scanner keyboard = new Scanner (System.in);
        System.out.println (&quot;Enter 7 temperatures:&quot;);
        double sum = 0;
        for (int index = 0 ; index &lt; 7 ; index++)
        {
            temperature [index] = keyboard.nextDouble ();
            sum = sum + temperature [index];
        }
        double average = sum / 7;
        System.out.println (&quot;The average temperature is &quot; + average);
        // Display each temperature and its relation to the average:
        System.out.println (&quot;The temperatures are&quot;);
        for (int index = 0 ; index &lt; 7 ; index++)
        {
            if (temperature [index] &lt; average)
                System.out.println (temperature [index] +
                        &quot; below average.&quot;);
            else if (temperature [index] &gt; average)
                System.out.println (temperature [index] +
                        &quot; above average.&quot;);
            else //temperature[index] == average
                System.out.println (temperature [index] +
                        &quot; the average.&quot;);
        }
        System.out.println (&quot;Have a nice week.&quot;);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.2">Listing
        7.2</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Reads temperatures from the user and shows which are above
and which are below the average of all the temperatures.
*/
import java.util.Scanner;
public class ArrayOfTemperatures2
{
    public static void main (String [] args)
    {
        Scanner keyboard = new Scanner (System.in);
        System.out.println (&quot;How many temperatures do you have?&quot;);
        int size = keyboard.nextInt ();
        double [] temperature = new double [size];
        // Read temperatures and compute their average:
        System.out.println (&quot;Enter &quot; + <span style="background-color: #FFFF00">temperature.length</span> +
                &quot; temperatures:&quot;);
        double sum = 0;
        for (int index = 0 ; index &lt; <span style="background-color: #FFFF00">temperature.length</span> ; index++)
        {
            temperature [index] = keyboard.nextDouble ();
            sum = sum + temperature [index];
        }
        double average = sum / <span style="background-color: #FFFF00">temperature.length</span>;
        System.out.println (&quot;The average temperature is &quot; +
                average);
        // Display each temperature and its relation to the average:
        System.out.println (&quot;The temperatures are&quot;);
        for (int index = 0 ; index &lt; <span style="background-color: #FFFF00">temperature.length</span> ; index++)
        {
            if (temperature [index] &lt; average)
                System.out.println (temperature [index] +
                        &quot; below average.&quot;);
            else if (temperature [index] &gt; average)
                System.out.println (temperature [index] +
                        &quot; above average.&quot;);
            else //temperature[index] == average
                System.out.println (temperature [index] +
                        &quot; the average.&quot;);
        }
        System.out.println (&quot;Have a nice week.&quot;);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.3">Listing
        7.3</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
/**
Class for sales associate records.
*/
public class SalesAssociate
{
    private String name;
    private double sales;
    public SalesAssociate ()
    {
        name = &quot;No record&quot;;
        sales = 0;
    }


    public SalesAssociate (String initialName,
            double initialSales)
    {
        set (initialName, initialSales);
    }


    public void set (String newName, double newSales)
    {
        name = newName;
        sales = newSales;
    }


    public void readInput ()
    {
        System.out.print (&quot;Enter name of sales associate: &quot;);
        Scanner keyboard = new Scanner (System.in);
        name = keyboard.nextLine ();
        System.out.print (&quot;Enter associates sales: $&quot;);
        sales = keyboard.nextDouble ();
    }


    public void writeOutput ()
    {
        System.out.println (&quot;Name: &quot; + name);
        System.out.println (&quot;Sales: $&quot; + sales);
    }


    public String getName ()
    {
        return name;
    }


    public double getSales ()
    {
        return sales;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.4">Listing
        7.4</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
/**
Program to generate sales report.
*/
public class SalesReporter
{
    private double highestSales;
    private double averageSales;
    private SalesAssociate [] team; //The array object is
    //created in getData.
    private int numberOfAssociates; //Same as team.length
    /**
    Reads the number of sales associates and data for each one.
    */
    public void getData ()
    {
        Scanner keyboard = new Scanner (System.in);
        System.out.println (&quot;Enter number of sales associates:&quot;);
        numberOfAssociates = keyboard.nextInt ();
        team = new SalesAssociate [numberOfAssociates + 1];
        for (int i = 1 ; i &lt;= numberOfAssociates ; i++)
        {
            team [i] = new SalesAssociate ();
            System.out.println (&quot;Enter data for associate &quot; + i);
            team [i].readInput ();
            System.out.println ();
        }
    }


    /**
    Computes the average and highest sales figures.
    Precondition: There is at least one salesAssociate.
    */
    public void computeStats ()
    {
        double nextSales = team [1].getSales ();
        highestSales = nextSales;
        double sum = nextSales;
        for (int i = 2 ; i &lt;= numberOfAssociates ; i++)
        {
            nextSales = team [i].getSales ();
            sum = sum + nextSales;
            if (nextSales &gt; highestSales)
                highestSales = nextSales; //highest sales so far.
        }
        averageSales = sum / numberOfAssociates;
    }


    /**
    Displays sales report on the screen.
    */
    public void displayResults ()
    {
        System.out.println (&quot;Average sales per associate is $&quot; +
                averageSales);
        System.out.println (&quot;The highest sales figure is $&quot; +
                highestSales);
        System.out.println ();
        System.out.println (&quot;The following had the highest sales:&quot;);
        for (int i = 1 ; i &lt;= numberOfAssociates ; i++)
        {
            double nextSales = team [i].getSales ();
            if (nextSales == highestSales)
            {
                team [i].writeOutput ();
                System.out.println (&quot;$&quot; + (nextSales - averageSales) +
                        &quot; above the average.&quot;);
                System.out.println ();
            }
        }
        System.out.println (&quot;The rest performed as follows:&quot;);
        for (int i = 1 ; i &lt;= numberOfAssociates ; i++)
        {
            double nextSales = team [i].getSales ();
            if (team [i].getSales () != highestSales)
            {
                team [i].writeOutput ();
                if (nextSales &gt;= averageSales)
                    System.out.println (&quot;$&quot; + (nextSales - averageSales)
                            + &quot; above the average.&quot;);
                else
                    System.out.println (&quot;$&quot; + (averageSales - nextSales)
                            + &quot; below the average.&quot;);
                System.out.println ();
            }
        }
    }</font></b></pre>
        <pre><b><font color="#0000FF" size="4">    public static void main (String [] args)
    {
        SalesReporter clerk = new SalesReporter ();
        clerk.getData ();
        clerk.computeStats ();
        clerk.displayResults ();
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.5">Listing
        7.5</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
/**
A demonstration of using indexed variables as arguments.
*/
public class ArgumentDemo
{
    public static void main (String [] args)
    {
        Scanner keyboard = new Scanner (System.in);
        System.out.println (&quot;Enter your score on exam 1:&quot;);
        int firstScore = keyboard.nextInt ();
        int [] nextScore = new int [3];
        for (int i = 0 ; i &lt; nextScore.length ; i++)
            nextScore [i] = firstScore + 5 * i;
        for (int i = 0 ; i &lt; nextScore.length ; i++)
        {
            double possibleAverage =
                getAverage (firstScore, nextScore [i]);
            System.out.println (&quot;If your score on exam 2 is &quot; +
                    nextScore [i]);
            System.out.println (&quot;your average will be &quot; +
                    possibleAverage);
        }
    }


    public static double getAverage (int n1, int n2)
    {
        return (n1 + n2) / 2.0;
    }
}
</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.6">Listing
        7.6</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
A demonstration program to test two arrays for equality.
*/
public class TestEquals
{
    public static void main (String [] args)
    {
        int [] a = new int [3];
        int [] b = new int [3];
        setArray (a);
        setArray (b);
        if (<span style="background-color: #FFFF00">b == a</span>)
            System.out.println (&quot;Equal by ==.&quot;);
        else
            System.out.println (&quot;Not equal by ==.&quot;);
        if (<span style="background-color: #FFFF00">equals (b, a)</span>)
            System.out.println (&quot;Equal by the equals method.&quot;);
        else
            System.out.println (&quot;Not equal by the equals method.&quot;);
    }


    public static boolean equals (<span style="background-color: #FFFF00">int [] a, int [] b</span>)
    {
        boolean elementsMatch = true; //tentatively
        if (a.length != b.length)
            elementsMatch = false;
        else
        {
            int i = 0;
            while (elementsMatch &amp;&amp; (i &lt; a.length))
            {
                if (a [i] != b [i])
                    elementsMatch = false;
                i++;
            }
        }
        return elementsMatch;
    }


    public static void setArray (<span style="background-color: #FFFF00">int [] array</span>)
    {
        for (int i = 0 ; i &lt; array.length ; i++)
            array [i] = i;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.7">Listing
        7.7</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
/**
A demonstration of a method that returns an array.
*/
public class ReturnArrayDemo
{
    public static void main (String [] args)
    {
        Scanner keyboard = new Scanner (System.in);
        System.out.println (&quot;Enter your score on exam 1:&quot;);
        int firstScore = keyboard.nextInt ();
        int [] nextScore = new int [3];
        for (int i = 0 ; i &lt; nextScore.length ; i++)
            nextScore [i] = firstScore + 5 * i;
        <span style="background-color: #FFFF00">double [] averageScore =</span>
            <span style="background-color: #FFFF00">getArrayOfAverages (firstScore, nextScore);</span>
        for (int i = 0 ; i &lt; nextScore.length ; i++)
        {
            System.out.println (&quot;If your score on exam 2 is &quot; +
                    nextScore [i]);
            System.out.println (&quot;your average will be &quot; +
                    averageScore [i]);
        }
    }


    public static <span style="background-color: #FFFF00">double []</span> getArrayOfAverages (int firstScore,
            int [] nextScore)
    {
        <span style="background-color: #FFFF00">double [] temp = new double [nextScore.length];</span>
        for (int i = 0 ; i &lt; temp.length ; i++)
            temp [i] = getAverage (firstScore, nextScore [i]);
        <span style="background-color: #FFFF00">return temp;</span>
    }


    public static double getAverage (int n1, int n2)
    {
        return (n1 + n2) / 2.0;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.8">Listing
        7.8</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import java.util.Scanner;
public class ListDemo
{
    public static final int MAX_SIZE = 3; //Assumed &gt; 0
    public static void main (String [] args)
    {
        OneWayNoRepeatsList toDoList =
            new OneWayNoRepeatsList (MAX_SIZE);
        System.out.println (
                &quot;Enter items for the list, when prompted.&quot;);
        boolean moreEntries = true;
        String next = null;
        Scanner keyboard = new Scanner (System.in);
        while (moreEntries &amp;&amp; <span style="background-color: #FFFF00">!toDoList.isFull ()</span>)
        {
            System.out.println (&quot;Enter an item:&quot;);
            next = keyboard.nextLine ();
            <span style="background-color: #FFFF00">toDoList.addItem (next);</span>
            if (<span style="background-color: #FFFF00">toDoList.isFull ()</span>)
            {
                System.out.println (&quot;List is now full.&quot;);
            }
            else
            {
                System.out.print (&quot;More items for the list? &quot;);
                String ans = keyboard.nextLine ();
                if (ans.trim ().equalsIgnoreCase (&quot;no&quot;))
                    moreEntries = false; //User says no more
            }
        }
        System.out.println (&quot;The list contains:&quot;);
        int position = <span style="background-color: #FFFF00">toDoList.START_POSITION;</span>
        next = <span style="background-color: #FFFF00">toDoList.getEntryAt (position);</span>
        while (next != null) //null indicates end of list
        {
            System.out.println (next);
            position++;
            next = <span style="background-color: #FFFF00">toDoList.getEntryAt (position);</span>
        }
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.9">Listing
        7.9</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
An object of this class is a special kind of list of strings. You
can write the list only from beginning to end. You can add only to
the end of the list. You cannot change individual entries, but you
can erase the entire list and start over. No entry may appear more
than once on the list. You can use int variables as position markers
into the list. Position markers are similar to array indices, but are
numbered starting with 1.
*/
public class OneWayNoRepeatsList
{
    public static int START_POSITION = 1;
    public static int DEFAULT_SIZE = 50;
    //entry.length is the total number of items you have room
    //for on the list (its capacity); countOfEntries is the number of
    //items currently on the list.
    private int countOfEntries; //can be less than entry.length.
    <span style="background-color: #FFFF00">private String [] entry;</span>
    /**
    Creates an empty list with a given capacity.
    */
    public OneWayNoRepeatsList (int maximumNumberOfEntries)
    {
        entry = new String [maximumNumberOfEntries];
        countOfEntries = 0;
    }


    /**
    Creates an empty list with a capacity of DEFAULT_SIZE.
    */
    public OneWayNoRepeatsList ()
    {
        entry = new String [DEFAULT_SIZE];
        countOfEntries = 0;
        // or replace these two statements with this(DEFAULT_SIZE);
    }


    public boolean isFull ()
    {
        return countOfEntries == entry.length;
    }


    public boolean isEmpty ()
    {
        return countOfEntries == 0;
    }


    /**
    Precondition: List is not full.
    Postcondition: If item was not on the list,
    it has been added to the list.
    */
    public void addItem (String item)
    {
        if (!isOnList (item))
        {
            if (countOfEntries == entry.length)
            {
                System.out.println (&quot;Adding to a full list!&quot;);
                System.exit (0);
            }
            else
            {
                entry [countOfEntries] = item;
                countOfEntries++;
            }
        } //else do nothing. Item is already on the list.
    }


    /**
    If the argument indicates a position on the list,
    the entry at that specified position is returned;
    otherwise, null is returned.
    */
    public String getEntryAt (int position)
    {
        <span style="background-color: #FFFF00">String result = null;                               </span>
        <span style="background-color: #FFFF00">if ((1 &lt;= position) &amp;&amp; (position &lt;= countOfEntries))</span>
        <span style="background-color: #FFFF00">    result = entry [position - 1];                  </span>
        <span style="background-color: #FFFF00">return result;                                      </span>
    }


    /**
    Returns true if position indicates the last item
    on the list; otherwise, returns false.
    */
    public boolean atLastEntry (int position)
    {
        return position == countOfEntries;
    }


    /**
    Returns true if item is on the list;
    otherwise, returns false. Does not differentiate
    between uppercase and lowercase letters.
    */
    public boolean isOnList (String item)
    {
        boolean found = false;
        int i = 0;
        while (<span style="background-color: #FFFF00">!found &amp;&amp; (i &lt; countOfEntries)</span>)
        {
            if (item.equalsIgnoreCase (entry [i]))
                found = true;
            else
                i++;
        }
        return found;
    }


    public int getMaximumNumberOfEntries ()
    {
        return entry.length;
    }


    public int getNumberOfEntries ()
    {
        return countOfEntries;
    }


    public void eraseList ()
    {
        countOfEntries = 0;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.10">Listing
        7.10</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Class for sorting an array of base type int from smallest to largest.
*/
public class ArraySorter
{
    /**
    Precondition: Every element in anArray has a value.
    Action: Sorts the array into ascending order.
    */
    public static void selectionSort (int [] anArray)
    {
        <span style="background-color: #FFFF00">for (int index = 0 ; index &lt; anArray.length - 1 ; index++)        </span>
        <span style="background-color: #FFFF00">{ // Place the correct value in anArray[index]                    </span>
        <span style="background-color: #FFFF00">    int indexOfNextSmallest = getIndexOfSmallest (index, anArray);</span>
        <span style="background-color: #FFFF00">    interchange (index, indexOfNextSmallest, anArray);            </span>
            //Assertion:anArray[0] &lt;= anArray[1] &lt;=...&lt;= anArray[index]
            //and these are the smallest of the original array elements.
            //The remaining positions contain the rest of the original
            //array elements.
        }
    }


    /**
    Returns the index of the smallest value in the portion of the
    array that begins at the element whose index is startIndex and
    ends at the last element.
    */
    private static int getIndexOfSmallest (int startIndex, int [] a)
    {
        int <span style="background-color: #FFFF00">min = a [startIndex];</span>
        int indexOfMin = startIndex;
        for (i<span style="background-color: #FFFF00">nt index = startIndex + 1 </span>; index &lt; a.length ; index++)
        {
            if (a [index] &lt; min)
            {
                min = a [index];
                indexOfMin = index;
                //min is smallest of a[startIndex] through a[index]
            }
        }
        return indexOfMin;
    }


    /**
    Precondition: i and j are valid indices for the array a.
    Postcondition: Values of a[i] and a[j] have been interchanged.
    */
    private static void interchange (int i, int j, int [] a)
    {
        int temp = a [i];
        a [i] = a [j];
        a [j] = temp; //original value of a[i]
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.11">Listing
        7.11</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class SelectionSortDemo
{
    public static void main (String [] args)
    {
        int [] b = {7, 5, 11, 2, 16, 4, 18, 14, 12, 30};
        display (b, before);
        <span style="background-color: #FFFF00">ArraySorter.selectionSort (b);</span>
        display (b, after);
    }


    public static void display (int [] array, String when)
    {
        System.out.println (&quot;Array values &quot; + when + &quot; sorting:&quot;);
        for (int i = 0 ; i &lt; array.length ; i++)
            System.out.print (array [i] + &quot; &quot;);
        System.out.println ();
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.12">Listing
        7.12</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Displays a two-dimensional table showing how
interest rates affect bank balances.
*/
public class InterestTable
{
    public static void main (String [] args)
    {
        <span style="background-color: #FFFF00">int [] [] table = new int [10] [6];                           </span>
        <span style="background-color: #FFFF00">for (int row = 0 ; row &lt; 10 ; row++)                          </span>
        <span style="background-color: #FFFF00">    for (int column = 0 ; column &lt; 6 ; column++)              </span>
        <span style="background-color: #FFFF00">        table [row] [column] =                                
</span>        <span style="background-color: #FFFF00">            getBalance (1000.00, row + 1, (5 + 0.5 * column));</span>
        System.out.println (&quot;Balances for Various Interest Rates &quot; +
                &quot;Compounded Annually&quot;);
        System.out.println (&quot;(Rounded to Whole Dollar Amounts)&quot;);
        System.out.println ();
        System.out.println (&quot;Years 5.00% 5.50% 6.00% 6.50% 7.00% 7.50%&quot;);
        <span style="background-color: #FFFF00">for (int row = 0 ; row &lt; 10 ; row++)                        </span>
        <span style="background-color: #FFFF00">{                                                           </span>
        <span style="background-color: #FFFF00">    System.out.print ((row + 1) + &quot; &quot;);                     </span>
        <span style="background-color: #FFFF00">    for (int column = 0 ; column &lt; 6 ; column++)            </span>
        <span style="background-color: #FFFF00">        System.out.print (&quot;$&quot; + table [row] [column] + &quot; &quot;);</span>
        <span style="background-color: #FFFF00">    System.out.println ();                                  </span>
        <span style="background-color: #FFFF00">}                                                           </span>
    }


    /**
    Returns the balance in an account after a given number of years
    and interest rate with an initial balance of startBalance.
    Interest is compounded annually. The balance is rounded
    to a whole number.
    */
    public static int getBalance (double startBalance, int years,
            double rate)
    {
        double runningBalance = startBalance;
        for (int count = 1 ; count &lt;= years ; count++)
            runningBalance = runningBalance * (1 + rate / 100);
        return (int) (Math.round (runningBalance));
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%" height="1015">
    <tr>
      <td width="100%" height="23">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.13">Listing
        7.13</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%" height="980">
        <pre><b><font color="#0000FF" size="4">/**
Displays a two-dimensional table showing how interest
rates affect bank balances.
*/
public class InterestTable2
{
    <span style="background-color: #FFFF00">public static final int ROWS = 10;</span>
    <span style="background-color: #FFFF00">public static final int COLUMNS = 6;</span>
    public static void main (String [] args)
    {
        int [] [] table = new int <span style="background-color: #FFFF00">[ROWS] [COLUMNS]</span>;
        for (int row = 0 ; row &lt; <span style="background-color: #FFFF00">ROWS</span> ; row++)
            for (int column = 0 ; column &lt; <span style="background-color: #FFFF00">COLUMNS</span> ; column++)
                table [row] [column] =
                    getBalance (1000.00, row + 1, (5 + 0.5 * column));
        System.out.println (&quot;Balances for Various Interest Rates &quot; +
                &quot;Compounded Annually&quot;);
        System.out.println (&quot;(Rounded to Whole Dollar Amounts)&quot;);
        System.out.println ();
        System.out.println (&quot;Years 5.00% 5.50% 6.00% 6.50% 7.00% 7.50%&quot;);
        <span style="background-color: #FFFF00">showTable (table);</span>
    }


    /**
    Precondition: The array anArray has ROWS rows and COLUMNS columns.
    Postcondition: The array contents are displayed with dollar signs.
    */
    public static void showTable (<span style="background-color: #FFFF00">int [] [] anArray</span>)
    {
        for (int row = 0 ; row &lt; ROWS ; row++)
        {
            System.out.print ((row + 1) + &quot; &quot;);
            for (int column = 0 ; column &lt; COLUMNS ; column++)
                System.out.print (&quot;$&quot; + anArray [row] [column] + &quot; &quot;);
            System.out.println ();
        }
    }


    public static int getBalance (double startBalance, int years, double rate)
        {
        double runningBalance = startBalance;
        for (int count = 1 ; count &lt;= years ; count++)
            runningBalance = runningBalance * (1 + rate / 100);
        return (int) (Math.round (runningBalance));
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.14">Listing
        7.14</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
Class that records the time worked by each of a
companys employees during one five-day week.
A sample application is in the main method.
*/
public class TimeBook
{
    private int numberOfEmployees;
    private int [] [] hours; //hours[i][j] has the hours for
    //employee j on day i.
    private int [] weekHours; //weekHours[i] has the weeks
    //hours worked for employee i + 1.
    private int [] dayHours; //dayHours[i] has the total hours
    //worked by all employees on day i.
    private static final int NUMBER_OF_WORKDAYS = 5;
    private static final int MON = 0;
    private static final int TUE = 1;
    private static final int WED = 2;
    private static final int THU = 3;
    private static final int FRI = 4;
    /**
    Reads hours worked for each employee on each day of the
    work week into the two-dimensional array hours. (The method
    for input is just a stub in this preliminary version.)
    Computes the total weekly hours for each employee and
    the total daily hours for all employees combined.
    */
    public static void main (String [] args)
    {
        private static final int NUMBER_OF_EMPLOYEES = 3;
        TimeBook book = new TimeBook (NUMBER_OF_EMPLOYEES);
        book.setHours ();
        book.update ();
        book.showTable ();
    }


    public TimeBook (int theNumberOfEmployees)
    {
        numberOfEmployees = theNumberOfEmployees;
        hours = new int [NUMBER_OF_WORKDAYS] [numberOfEmployees];
        weekHours = new int [numberOfEmployees];
        dayHours = new int [NUMBER_OF_WORKDAYS];
    }


    public void setHours ()  //This is a stub.
    {
        hours [0] [0] = 8;
        hours [0] [1] = 0;
        hours [0] [2] = 9;
        hours [1] [0] = 8;
        hours [1] [1] = 0;
        hours [1] [2] = 9;
        hours [2] [0] = 8;
        hours [2] [1] = 8;
        hours [2] [2] = 8;
        hours [3] [0] = 8;
        hours [3] [1] = 8;
        hours [3] [2] = 4;
        hours [4] [0] = 8;
        hours [4] [1] = 8;
        hours [4] [2] = 8;
    }


    public void update ()
    {
        computeWeekHours ();
        computeDayHours ();
    }


    private void computeWeekHours ()
    {
        for (employeeNumber = 1 ; employeeNumber &lt;= numberOfEmployees ;
                employeeNumber++)
        { //Process one employee:
            int sum = 0;
            for (int day = MON ; day &lt;= FRI ; day++)
                sum = sum + hours [day] [employeeNumber - 1];
            //sum contains the sum of all the hours worked in
            //one week by the employee with number employeeNumber.
            weekHours [employeeNumber - 1] = sum;
        }
    }


    private void computeDayHours ()
    {
        for (int day = MON ; day &lt;= FRI ; day++)
        { //Process one day (for all employees):
            int sum = 0;
            for (int employeeNumber = 1 ;
                    employeeNumber &lt;= numberOfEmployees ;
                    employeeNumber++)
                sum = sum + hours [day] [employeeNumber - 1];
            //sum contains the sum of all hours worked by all
            //employees on one day.
            dayHours [day] = sum;
        }
    }


    public void showTable ()
    {
        // heading
        System.out.print (&quot;Employee &quot;);
        for (int employeeNumber = 1 ;
                employeeNumber &lt;= numberOfEmployees ;
                employeeNumber++)
            System.out.print (employeeNumber + &quot; &quot;);
        System.out.println (&quot;Totals&quot;);
        System.out.println ();
        // row entries
        for (int day = MON ; day &lt;= FRI ; day++)
        {
            System.out.print (getDayName (day) + &quot; &quot;);
            for (int column = 0 ; column &lt; hours [day].length ;
                    column++)
                System.out.print (hours [day] [column] + &quot; &quot;);
            System.out.println (dayHours [day]);
        }
        System.out.println ();
        System.out.print (&quot;Total = &quot;);
        for (int column = 0 ; column &lt; numberOfEmployees ; column++)
            System.out.print (weekHours [column] + &quot; &quot;);
        System.out.println ();
    }


    //Converts 0 to &quot;Monday&quot;, 1 to &quot;Tuesday&quot;, etc.
    //Blanks are inserted to make all strings the same length.
    private String getDayName (int day)
    {
        String dayName = null;
        switch (day)
        {
            case MON:
                dayName = &quot;Monday &quot;;
                break;
            case TUE:
                dayName = &quot;Tuesday &quot;;
                break;
            case WED:
                dayName = &quot;Wednesday&quot;;
                break;
            case THU:
                dayName = &quot;Thursday &quot;;
                break;
            case FRI:
                dayName = &quot;Friday &quot;;
                break;
            default:
                System.out.println (&quot;Fatal Error.&quot;);
                System.exit (0);
                break;
        }
        return dayName;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.15">Listing
        7.15</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JLabel;
<span style="background-color: #FFFF00">import javax.swing.JTextArea;</span>
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
public class Oracle extends JApplet implements ActionListener
{
    public static int LINES = 5;
    public static int CHAR_PER_LINE = 40;
    p<span style="background-color: #FFFF00">rivate JTextArea theText;</span>
    private String question;
    private String answer;
    private String advice;
    public void init ()
    {
        Container contentPane = getContentPane ();
        contentPane.setLayout (new FlowLayout ());
        JLabel instructions =
            new JLabel (&quot;I will answer any question, &quot; +
                &quot;but may need some advice from you.&quot;);
        contentPane.add (instructions);
        JButton getAnswerButton = new JButton (&quot;Get Answer&quot;);
        getAnswerButton.addActionListener (this);
        contentPane.add (getAnswerButton);
        JButton sendAdviceButton = new JButton (&quot;Send Advice&quot;);
        sendAdviceButton.addActionListener (this);
        contentPane.add (sendAdviceButton);
        JButton resetButton = new JButton (&quot;Reset&quot;);
        resetButton.addActionListener (this);
        contentPane.add (resetButton);
        <span style="background-color: #FFFF00">theText = new JTextArea (LINES, CHAR_PER_LINE);   </span>
        <span style="background-color: #FFFF00">theText.setText (&quot;Questions and advice go here.&quot;);</span>
        <span style="background-color: #FFFF00">contentPane.add (theText);                        </span>
        answer = &quot;The answer is: Look around.&quot;; //first answer
    }


    public void actionPerformed (ActionEvent e)
    {
        String actionCommand = e.getActionCommand ();
        if (actionCommand.equals (&quot;Get Answer&quot;))
        {
            <span style="background-color: #FFFF00">question = theText.getText ();                      </span>
            <span style="background-color: #FFFF00">theText.setText (&quot;That is a difficult question.\n&quot; +</span>
            <span style="background-color: #FFFF00">        &quot;Please give me some advice\n&quot; +            </span>
            <span style="background-color: #FFFF00">        &quot;and click the Send Advice button.&quot;);       </span>
        }
        else if (actionCommand.equals (&quot;Send Advice&quot;))
        {
            <span style="background-color: #FFFF00">advice = theText.getText ();                   </span>
            <span style="background-color: #FFFF00">theText.setText (&quot;That advice helped.\n&quot; +     </span>
            <span style="background-color: #FFFF00">        &quot;You asked the question: &quot; + question +</span>
            <span style="background-color: #FFFF00">        &quot;\n&quot; + answer +                        </span>
            <span style="background-color: #FFFF00">        &quot;\nClick the Reset button and&quot; +       </span>
            <span style="background-color: #FFFF00">        &quot;\nleave the program on for others.&quot;); </span>
            answer = &quot;The answer is: &quot; + advice;
        }
        else if (actionCommand.equals (&quot;Reset&quot;))
        {
            <span style="background-color: #FFFF00">theText.setText (&quot;Questions and advice go here.&quot;);</span>
        }
        else
            <span style="background-color: #FFFF00">theText.setText (&quot;Error&quot;);</span>
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 7.16">Listing
        7.16</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">import javax.swing.JApplet;
import java.awt.Color;
import java.awt.Graphics;
public class House extends JApplet
{
    private int [] xHouse = {150, 150, 200, 250, 250};
    private int [] yHouse = {100, 40, 20, 40, 100};
    private int [] xDoor = {175, 175, 200, 200};
    private int [] yDoor = {100, 60, 60, 100};
    private int [] xWindow = {220, 220, 240, 240};
    private int [] yWindow = {60, 80, 80, 60};
    public void paint (Graphics canvas)
    {
        super.paint();
        this.setBackground (Color.LIGHT_GRAY);
        canvas.setColor (Color.GREEN);
        <span style="background-color: #FFFF00">canvas.fillPolygon (xHouse, yHouse, xHouse.length);</span>
        canvas.setColor (Color.BLACK);
        <span style="background-color: #FFFF00">canvas.drawPolyline (xDoor, yDoor, xDoor.length);</span>
        <span style="background-color: #FFFF00">canvas.drawPolygon (xWindow, yWindow, xWindow.length);</span>
        canvas.drawString (&quot;Home sweet home!&quot;, 150, 120);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>


<p>&nbsp;</p>
<p align="center">&nbsp;</p>



<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.1">Listing
        8.1</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class Person
{
    private String name;
    public Person ()
    {
        name = &quot;No name yet&quot;;
    }


    public Person (String initialName)
    {
        name = initialName;
    }


    public void setName (String newName)
    {
        name = newName;
    }


    public String getName ()
    {
        return name;
    }


    public void writeOutput ()
    {
        System.out.println (&quot;Name: &quot; + name);
    }


    public boolean hasSameName (Person otherPerson)
    {
        return this.name.equalsIgnoreCase (otherPerson.name);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.2">Listing
        8.2</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class Student extends Person
{
    private int studentNumber;
    public Student ()
    {
        <span style="background-color: #FFFF00">super ();</span>
        studentNumber = 0; //Indicating no number yet
    }


    public Student (String initialName, int initialStudentNumber)
    {
        <span style="background-color: #FFFF00">super (initialName);</span>
        studentNumber = initialStudentNumber;
    }


    public void reset (String newName, int newStudentNumber)
    {
        <span style="background-color: #FFFF00">setName (newName);</span>
        studentNumber = newStudentNumber;
    }


    public int getStudentNumber ()
    {
        return studentNumber;
    }


    public void setStudentNumber (int newStudentNumber)
    {
        studentNumber = newStudentNumber;
    }


    public void writeOutput ()
    {
        System.out.println (&quot;Name: &quot; + getName ());
        System.out.println (&quot;Student Number: &quot; + studentNumber);
    }


    public boolean equals (Student otherStudent)
    {
        return this.hasSameName (otherStudent) &amp;&amp;
            (this.studentNumber == otherStudent.studentNumber);
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.3">Listing
        8.3</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">public class InheritanceDemo
{
    public static void main (String [] args)
    {
        Student s = new Student ();
        s.setName (&quot;Warren Peace&quot;);
        s.setStudentNumber (1234);
        s.writeOutput ();
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.4">Listing
        8.4</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>public class Undergraduate <span style="background-color: #FFFF00">extends Student</span>
{
    <span style="background-color: #FFFF00">private int level;</span> //1 for freshman, 2 for sophomore,
    //3 for junior, or 4 for senior.
    
</b></font>     <font color="#0000FF" size="4"><b>public Undergraduate ()
    {
        <span style="background-color: #FFFF00">super ()</span>;
        level = 1;
    }


    public Undergraduate (String initialName,
            int initialStudentNumber, int initialLevel)
    {
        <span style="background-color: #FFFF00">super (initialName, initialStudentNumber);</span>
        setLevel (initialLevel); //Checks 1 &lt;= initialLevel &lt;= 4
    }


    public v<span style="background-color: #FFFF00">oid reset (String newName, int newStudentNumber,</span>
            <span style="background-color: #FFFF00">int newLevel)</span>
    {
        <span style="background-color: #FFFF00">reset (newName, newStudentNumber);</span> //Students reset
        setLevel (newLevel); //Checks 1 &lt;= newLevel &lt;= 4
    }


    public int getLevel ()
    {
        return level;<span style="background-color: #FFFF00">
</span>    }


    public void setLevel (int newLevel)
    {
        if ((1 &lt;= newLevel) &amp;&amp; (newLevel &lt;= 4))
            level = newLevel;
        else
        {
            System.out.println (&quot;Illegal level!&quot;);
            System.exit (0);
        }
    }


    public <span style="background-color: #FFFF00">void writeOutput ()</span>
    {
        <span style="background-color: #FFFF00">super.writeOutput ();</span>
        System.out.println (&quot;Student Level: &quot; + level);
    }


    public boolean <span style="background-color: #FFFF00">equals (Undergraduate otherUndergraduate)</span>
    {
        return <span style="background-color: #FFFF00">equals ((Student) otherUndergraduate)</span> &amp;&amp;
            (this.level == otherUndergraduate.level);
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.5">Listing
        8.5</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>public boolean equals (<span style="background-color: #FFFF00">Object otherObject</span>)
{
    boolean isEqual = false;
    if ((otherObject != null) &amp;&amp;
            (otherObject instanceof Student))
    {
        Student otherStudent = (Student) otherObject;
        isEqual = this.sameName (otherStudent) &amp;&amp;
            (this.studentNumber ==
                otherStudent.studentNumber);
    }


    return isEqual;
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>


<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.6">Listing
        8.6</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>
public class PolymorphismDemo
{
	public static void main(String[] args)
	{
		Person[] people = new Person[4];

		people[0] = new Undergraduate("Cotty, Manny", 4910, 1);
		people[1] = new Undergraduate("Kick, Anita", 9931, 2);
		people[2] = new Student("DeBanque, Robin", 8812);
		people[3] = new Undergraduate("Bugg, June", 9901, 4);

		for (Person p : people)
		{
			p.writeOutput();
			System.out.println();
		}
	}
}        
        </b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>


<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.7">Listing
        8.7</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
An interface for methods that return
the perimeter and area of an object.
*/
public interface Measurable
{
    /** Returns the perimeter. */
    public double getPerimeter ();
    /** Returns the area. */
    public double getArea ();
}&nbsp;</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.8">Listing
        8.8</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
A class of rectangles.
*/
public class Rectangle implements Measurable
{
    private double myWidth;
    private double myHeight;

    public Rectangle (double width, double height)
    {
        myWidth = width;
        myHeight = height;
    }


    public double getPerimeter ()
    {
        return 2 * (myWidth + myHeight);
    }


    public double getArea ()
    {
        return myWidth * myHeight;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.9">Listing
        8.9</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><b><font color="#0000FF" size="4">/**
A class of circles.
*/
public class Circle implements Measurable
{
    private double myRadius;

    public Circle (double radius)
    {
        myRadius = radius;
    }


    public double getPerimeter ()
    {
        return 2 * Math.PI * myRadius;
    }


    public double getCircumference ()
    {
        return getPerimeter ();
    }


    public double getArea ()
    {
        return Math.PI * myRadius * myRadius;
    }
}</font></b></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.10">Listing
        8.10</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
Interface for simple shapes drawn on
the screen using keyboard characters.
*/
public interface ShapeInterface
{
    /**
    Sets the offset for the shape.
    */
    public void setOffset (int newOffset);
    /**
    Returns the offset for the shape.
    */
    public int getOffset ();
    /**
    Draws the shape at lineNumber lines down
    from the current line.
    */
    public void drawAt (int lineNumber);
    /**
    Draws the shape at the current line.
    */
    public void drawHere ();
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.11">Listing
        8.11</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
Interface for a rectangle to be drawn on the screen.
*/
public interface RectangleInterface extends ShapeInterface
{
    /**
    Sets the rectangle's dimensions.
    */
    public void set (int newHeight, int newWidth);
}
/**
Interface for a triangle to be drawn on the screen.
*/
public interface TriangleInterface extends ShapeInterface
{
    /**
    Sets the triangle's base.
    */
    public void set (int newBase);
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.12">Listing
        8.12</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
Class for drawing simple shapes on the screen using keyboard
characters. This class will draw an asterisk on the screen as a
test. It is not intended to create a &quot;real&quot; shape, but rather
to be used as a base class for other classes of shapes.
*/
public class ShapeBasics implements ShapeInterface
{
    private int offset;
    public ShapeBasics ()
    {
        offset = 0;
    }


    public ShapeBasics (int theOffset)
    {
        offset = theOffset;
    }


    public void setOffset (int newOffset)
    {
        offset = newOffset;
    }


    public int getOffset ()
    {
        return offset;
    }


    public void drawAt (int lineNumber)
    {
        for (int count = 0 ; count &lt; lineNumber ; count++)
            System.out.println ();
       <a name="drawHere ();"> <span style="background-color: #FFFF00">drawHere ();</span></a>
    }


    <span style="background-color: #FFFF00">public void drawHere ()                           </span>
    <span style="background-color: #FFFF00">{                                                 </span>
    <span style="background-color: #FFFF00">    for (int count = 0 ; count &lt; offset ; count++)</span>
    <span style="background-color: #FFFF00">        System.out.print (' ');                   </span>
    <span style="background-color: #FFFF00">    System.out.println ('*');                     </span>
    <span style="background-color: #FFFF00">}                                                 </span>
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.13">Listing
        8.13</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
Class for drawing rectangles on the screen using keyboard
characters. Each character is higher than it is wide, so
these rectangles will look taller than you might expect.
Inherits getOffset, setOffset, and drawAt from the class
ShapeBasics.
*/
public class Rectangle extends ShapeBasics
    implements RectangleInterface
{
    private int height;
    private int width;
    public Rectangle ()
    {
        <span style="background-color: #FFFF00">super ();</span>
        height = 0;
        width = 0;
    }


    public Rectangle (int theOffset, int theHeight,
            int theWidth)
    {
        <span style="background-color: #FFFF00">super (theOffset);</span>
        height = theHeight;
        width = theWidth;
    }


    public void set (int newHeight, int newWidth)
    {
        height = newHeight;
        width = newWidth;
    }


    <span style="background-color: #FFFF00">public void drawHere ()   </span>
    <span style="background-color: #FFFF00">{                         </span>
    <span style="background-color: #FFFF00">    drawHorizontalLine ();</span>
    <span style="background-color: #FFFF00">    drawSides ();         </span>
    <span style="background-color: #FFFF00">    drawHorizontalLine ();</span>
    <span style="background-color: #FFFF00">}                         </span>


    private void drawHorizontalLine ()
    {
        skipSpaces (getOffset ());
        for (int count = 0 ; count &lt; width ; count++)
            System.out.print ('-');
        System.out.println ();
    }


    private void drawSides ()
    {
        for (int count = 0 ; count &lt; (height - 2) ; count++)
            drawOneLineOfSides ();
    }


    private void drawOneLineOfSides ()
    {
        skipSpaces (getOffset ());
        System.out.print ('|');
        skipSpaces (width - 2);
        System.out.println ('|');
    }


    //Writes the indicated number of spaces.
    private static void skipSpaces (int number)
    {
        for (int count = 0 ; count &lt; number ; count++)
            System.out.print (' ');
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.14">Listing
        8.14</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
Class for drawing triangles on the screen using keyboard
characters. A triangle points up. Its size is determined
by the length of its base, which must be an odd integer.
Inherits getOffset, setOffset, and drawAt from the class
ShapeBasics.
*/
public class Triangle extends ShapeBasics
    implements TriangleInterface
{
    private int base;
    public Triangle ()
    {
        super ();
        base = 0;
    }


    public Triangle (int theOffset, int theBase)
    {
        super (theOffset);
        base = theBase;
    }


    /** Precondition: newBase is odd. */
    public void set (int newBase)
    {
        base = newBase;
    }


    <span style="background-color: #FFFF00">public void drawHere ()</span>
    <span style="background-color: #FFFF00">{                      </span>
    <span style="background-color: #FFFF00">    drawTop ();        </span>
    <span style="background-color: #FFFF00">    drawBase ();       </span>
    <span style="background-color: #FFFF00">}                      </span>


    private void drawBase ()
    {
        skipSpaces (getOffset ());
        for (int count = 0 ; count &lt; base ; count++)
            System.out.print ('*');
        System.out.println ();
    }


    {
        //startOfLine == number of spaces to the
        //first '*' on a line. Initially set to the
        //number of spaces before the topmost '*'.
        int startOfLine = getOffset () + base / 2;
        skipSpaces (startOfLine);
        System.out.println ('*'); //top '*'
        int lineCount = base / 2 - 1; //height above base
        //insideWidth == number of spaces between the
        //two '*'s on a line.
        int insideWidth = 1;
        <span style="background-color: #FFFF00">for (int count = 0 ; count &lt; lineCount ; count++)    </span>
        <span style="background-color: #FFFF00">{                                                    </span>
        <span style="background-color: #FFFF00">    //Down one line, so the first '*' is one more    </span>
        <span style="background-color: #FFFF00">    //space to the left.                             </span>
        <span style="background-color: #FFFF00">    startOfLine--;                                   </span>
        <span style="background-color: #FFFF00">    skipSpaces (startOfLine);                        </span>
        <span style="background-color: #FFFF00">    System.out.print ('*');                          </span>
        <span style="background-color: #FFFF00">    skipSpaces (insideWidth);                        </span>
        <span style="background-color: #FFFF00">    System.out.println ('*');                        </span>
        <span style="background-color: #FFFF00">    //Down one line, so the inside is 2 spaces wider.</span>
        <span style="background-color: #FFFF00">    insideWidth = insideWidth + 2;                   </span>
        <span style="background-color: #FFFF00">}                                                    </span>
    }


    private static void skipSpaces (int number)
    {
        for (int count = 0 ; count &lt; number ; count++)
            System.out.print (' ');
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.15">Listing
        8.15</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
A program that draws a fir tree composed of a triangle and
a rectangle, both drawn using keyboard characters.
*/
public class TreeDemo
{
    public static final int INDENT = 5;
    public static final int TREE_TOP_WIDTH = 21; // must be odd
    public static final int TREE_BOTTOM_WIDTH = 4;
    public static final int TREE_BOTTOM_HEIGHT = 4;
    public static void main (String [] args)
    {
        drawTree (TREE_TOP_WIDTH, TREE_BOTTOM_WIDTH,
                TREE_BOTTOM_HEIGHT);
    }


    public static void drawTree (int topWidth, int bottomWidth,
            int bottomHeight)
    {
        System.out.println (&quot; Save the Redwoods!&quot;);
        TriangleInterface treeTop = new Triangle (INDENT, topWidth);
        drawTop (treeTop);
        RectangleInterface treeTrunk = new Rectangle (INDENT +
                (topWidth / 2) - (bottomWidth / 2),
                bottomHeight, bottomWidth);
        drawTrunk (treeTrunk);
    }


    private static void drawTop (TriangleInterface treeTop)
    {
        treeTop.drawAt (1);
    }


    private static void drawTrunk (RectangleInterface treeTrunk)
    {
        treeTrunk.drawHere (); // or treeTrunk.drawAt(0);
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>
<p>&nbsp;</p>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.16">Listing
        8.16</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>
public class Fruit 
{
	private String fruitName;

	public Fruit()
	{
		fruitName = "";
	}
	public Fruit(String name)
	{
		fruitName = name;
	}
	public void setName(String name)
	{
		fruitName = name;
	}
	public String getName()
	{
		return fruitName;
	}
}        
        </b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>
<p>&nbsp;</p>


<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.17">Listing
        8.17</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>
import java.util.Arrays;

public class FruitDemo
{
	public static void main(String[] args)
	{
		Fruit[] fruits = new Fruit[4];

		fruits[0] = new Fruit("Orange");
		fruits[1] = new Fruit("Apple");
		fruits[2] = new Fruit("Kiwi");
		fruits[3] = new Fruit("Durian");

		Arrays.sort(fruits);

		// Output the sorted array of fruits
		for (Fruit f : fruits)
		{
			System.out.println(f.getName());
		}
	}
}       
        </b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>
<p>&nbsp;</p>


<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.18">Listing
        8.18</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>
public class Fruit implements Comparable
{
	private String fruitName;

	public Fruit()
	{
		fruitName = "";
	}
	public Fruit(String name)
	{
		fruitName = name;
	}
	public void setName(String name)
	{
		fruitName = name;
	}
	public String getName()
	{
		return fruitName;
	}
	public int compareTo(Object o)
	{
		if ((o != null) &&
		    (o instanceof Fruit))
		{
			Fruit otherFruit = (Fruit) o;
			return (fruitName.compareTo(otherFruit.fruitName));
/*** Alternate definition of comparison using fruit length ***/
/*
			if (fruitName.length() > otherFruit.fruitName.length())
				return 1;
			else if (fruitName.length() < otherFruit.fruitName.length())
				return -1;
			else
				return 0;
*/
		}
		return -1;		// Default if other object is not a Fruit
	}
}        
        </b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>
<p>&nbsp;</p>


<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.19">Listing
        8.19</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>/**
Abstract base class for drawing simple shapes on the screen
using characters.
*/
public abstract class ShapeBase implements ShapeInterface
{
    private int offset;
    public abstract void drawHere ();
    
    /*
    The rest of the class is identical to ShapeBasics in Listing 8.11, 
    except for the names of the constructors.Only the method 
    drawHere is abstract.  Methods other than drawHere have bodies and do
    not have the keyword abstract in heir headings.
    We repeat one such method here:
    */

    public void drawAt (int lineNumber)
    {
        for (int count = 0 ; count &lt; lineNumber ; count++)
            System.out.println ();
        drawHere ();
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>


<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.20">Listing
        8.20</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>import javax.swing.JButton;
import javax.swing.JFrame;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
Simple demonstration of putting buttons in a JFrame window.
*/
public class ButtonDemo extends JFrame implements ActionListener
{
    public static final int WIDTH = 400;
    public static final int HEIGHT = 300;

    <span style="background-color: #FFFF00">public ButtonDemo ()</span>
    {
        <span style="background-color: #FFFF00">setSize (WIDTH, HEIGHT);                          
</span>        <span style="background-color: #FFFF00">WindowDestroyer listener = new WindowDestroyer ();</span>
        <span style="background-color: #FFFF00">addWindowListener (listener);                     </span>
        Container contentPane = getContentPane ();
        contentPane.setBackground (Color.WHITE);
        contentPane.setLayout (new FlowLayout ());
        JButton sunnyButton = new JButton (&quot;Sunny&quot;);
        sunnyButton.addActionListener (this);
        contentPane.add (sunnyButton);
        JButton cloudyButton = new JButton (&quot;Cloudy&quot;);
        cloudyButton.addActionListener (this);
        contentPane.add (cloudyButton);
    }


    public void actionPerformed (ActionEvent e)
    {
        String actionCommand = e.getActionCommand ();
        Container contentPane = getContentPane ();
        if (actionCommand.equals (&quot;Sunny&quot;))
            contentPane.setBackground (Color.BLUE);
        else if (actionCommand.equals (&quot;Cloudy&quot;))
            contentPane.setBackground (Color.GRAY);
        else
            System.out.println (&quot;Error in button interface.&quot;);
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.21">Listing
        8.21</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>public class ShowButtonDemo
{
    public static void main (String [] args)
    {
        ButtonDemo gui = new ButtonDemo ();
        gui.setVisible (true);
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Listing 8.22">Listing
        8.22</a></font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF" size="4"><b>import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
If you register an object of this class as a listener to any
object of the class JFrame, the object will end the program
and close the JFrame window if the user clicks the window's
close-window button.
*/

public class WindowDestroyer extends WindowAdapter
{
    public void windowClosing (WindowEvent e)
    {
        System.exit (0);
    }
}</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>



</body>

</html>
